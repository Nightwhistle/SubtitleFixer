/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package subtitlefixer;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.nio.charset.Charset;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;

/**
 *
 * @author Pakijaner
 */
public class SubtitleFixer extends javax.swing.JFrame {

    /**
     * Creates new form SubtitleFixerGUI
     */
    File file;
    Subtitle subtitle;

    public SubtitleFixer() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        fileChooser = new javax.swing.JFileChooser();
        bChose = new javax.swing.JButton();
        tfPathField = new javax.swing.JTextField();
        bFix = new javax.swing.JButton();

        jDialog1.setMinimumSize(new java.awt.Dimension(700, 500));
        jDialog1.getContentPane().setLayout(new java.awt.BorderLayout(10, 10));

        fileChooser.setCurrentDirectory(new java.io.File("D:\\"));
            fileChooser.setDialogTitle("Chose subtitle");
            fileChooser.setMinimumSize(new java.awt.Dimension(700, 500));
            jDialog1.getContentPane().add(fileChooser, java.awt.BorderLayout.CENTER);

            setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

            bChose.setText("Chose subtitle");
            bChose.setToolTipText("");
            bChose.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    bChoseActionPerformed(evt);
                }
            });

            tfPathField.setEditable(false);
            tfPathField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
            tfPathField.setText("Subtitle path");
            tfPathField.setFocusable(false);

            bFix.setText("Fix");
            bFix.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    bFixActionPerformed(evt);
                }
            });

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
            getContentPane().setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(bChose, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(194, 194, 194))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(bFix, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(209, 209, 209))))
                .addGroup(layout.createSequentialGroup()
                    .addGap(39, 39, 39)
                    .addComponent(tfPathField, javax.swing.GroupLayout.PREFERRED_SIZE, 542, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(21, Short.MAX_VALUE))
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(131, 131, 131)
                    .addComponent(bChose, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(tfPathField, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(27, 27, 27)
                    .addComponent(bFix, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(133, Short.MAX_VALUE))
            );

            pack();
        }// </editor-fold>//GEN-END:initComponents

    private void bFixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bFixActionPerformed
        fixSubtitle();
    }//GEN-LAST:event_bFixActionPerformed

    private void bChoseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bChoseActionPerformed
        if (fileChooser.showOpenDialog(jDialog1) == JFileChooser.APPROVE_OPTION) {

            file = fileChooser.getSelectedFile();
            subtitle = new Subtitle();
            subtitle.setName(file.getName());
            subtitle.setPath(file.getAbsolutePath());
            tfPathField.setText(subtitle.getPath());

        }
    }//GEN-LAST:event_bChoseActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SubtitleFixer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SubtitleFixer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SubtitleFixer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SubtitleFixer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SubtitleFixer().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bChose;
    private javax.swing.JButton bFix;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JTextField tfPathField;
    // End of variables declaration//GEN-END:variables

    private void fixSubtitle() {
        BufferedWriter bw = null;
        BufferedReader br = null;
        
        try {
            br = new BufferedReader(new InputStreamReader(new FileInputStream(file), Charset.forName("CP1250")));
            String line;
            String extension = file.getName().substring(file.getName().length() - 4);
            String outputPath = file.getAbsolutePath().substring(0, file.getAbsolutePath().length() - 4) + "_fix" + extension;
            bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(outputPath), Charset.forName("UTF-8")));

            while ((line = br.readLine()) != null) {
                line = line.replaceAll("š", "s");
                line = line.replaceAll("đ", "dj");
                line = line.replaceAll("č", "c");
                line = line.replaceAll("ć", "c");
                line = line.replaceAll("ž", "z");
                line = line.replaceAll("Š", "S");
                line = line.replaceAll("Đ", "Dj");
                line = line.replaceAll("Č", "C");
                line = line.replaceAll("Ć", "C");
                line = line.replaceAll("Ž", "Z");
                
                System.out.println(line);
                bw.write(line + System.lineSeparator());
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(SubtitleFixer.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(SubtitleFixer.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            if (br != null) {
                try {
                    br.close();
                } catch (IOException ex) {
                    Logger.getLogger(SubtitleFixer.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            
            if (bw != null) {
                try {
                    bw.close();
                } catch (IOException ex) {
                    Logger.getLogger(SubtitleFixer.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }
}
